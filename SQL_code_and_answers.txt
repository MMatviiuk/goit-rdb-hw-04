1
CREATE SCHEMA LibraryManagement;
USE LibraryManagement;

CREATE TABLE authors (
  author_id INT NOT NULL AUTO_INCREMENT,
  author_name VARCHAR(255),
  PRIMARY KEY (author_id)
);

CREATE TABLE genres (
  genre_id INT NOT NULL AUTO_INCREMENT,
  genre_name VARCHAR(255),
  PRIMARY KEY (genre_id)
);

CREATE TABLE books (
  book_id INT NOT NULL AUTO_INCREMENT,
  title VARCHAR(255),
  publication_year YEAR,
  author_id INT,
  genre_id INT,
  PRIMARY KEY (book_id),
  FOREIGN KEY (author_id) REFERENCES authors(author_id),
  FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);

CREATE TABLE users (
  user_id INT NOT NULL AUTO_INCREMENT,
  username VARCHAR(255),
  email VARCHAR(255),
  PRIMARY KEY (user_id)
);

CREATE TABLE borrowed_books (
  borrow_id INT NOT NULL AUTO_INCREMENT,
  book_id INT,
  user_id INT,
  borrow_date DATE,
  return_date DATE,
  PRIMARY KEY (borrow_id),
  FOREIGN KEY (book_id) REFERENCES books(book_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);



2.
USE LibraryManagement;

INSERT INTO authors (author_name) VALUES ('Тарас Шевченко');
INSERT INTO authors (author_name) VALUES ('Іван Франко');
INSERT INTO authors (author_name) VALUES ('Леся Українка');

INSERT INTO genres (genre_name) VALUES ('поезія');
INSERT INTO genres (genre_name) VALUES ('проза');

INSERT INTO users (username, email) VALUES ('Софія', 'sofia@gmail.com');
INSERT INTO users (username, email) VALUES ('Андрій', 'andrii@gmail.com');
INSERT INTO users (username, email) VALUES ('Олександр', 'oleksandr@gmail.com');
INSERT INTO users (username, email) VALUES ('Богдан', 'bogdan@gmail.com');

INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Кобзар', 1840, 1, 1);
INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Захар Беркут', 1883, 2, 2);
INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Лісова пісня', 1911, 3, 1);

INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (2, 4, '2025-01-05', '2025-01-10');
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (1, 2, '2025-02-10', '2025-02-20');
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (3, 1, '2025-03-01', '2025-03-07');
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (2, 3, '2025-02-20', '2025-02-28');


3.
use mydb;
SELECT 
    orders.id AS order_id,
    customers.name AS customer_name,
    employees.first_name AS employee_first_name,
    employees.last_name AS employee_last_name,
    orders.date AS order_date,
    shippers.name AS shipper_name,
    products.name AS product_name,
    categories.name AS category_name,
    suppliers.name AS supplier_name,
    order_details.quantity AS quantity,
    products.price AS price
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.category_id = categories.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id;


4.

4.1. Підрахунок загальної кількості рядків з INNER JOIN
SELECT COUNT(*) AS total_rows
FROM order_details od
INNER JOIN orders o ON od.order_id = o.id
INNER JOIN customers c ON o.customer_id = c.id
INNER JOIN employees e ON o.employee_id = e.employee_id
INNER JOIN shippers sh ON o.shipper_id = sh.id
INNER JOIN products p ON od.product_id = p.id
INNER JOIN categories cat ON p.category_id = cat.id
INNER JOIN suppliers s ON p.supplier_id = s.id;

total_rows = 518

4.2. Підрахунок рядків при використанні LEFT та RIGHT JOIN
SELECT COUNT(*) AS total_rows
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id  
RIGHT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id;

total_rows = 535

Відображається на 17 строк більше (535-518), тобто в базі даних є 17 кліентів які ще не зробили замовлення.

4.3. Фільтрація рядків за employee_id > 3 та ≤ 10
SELECT COUNT(*) AS total_rows
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
LEFT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id 
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
WHERE e.employee_id > 3 AND e.employee_id <= 10;

total_rows = 317

4.4. Групування за категорією та підрахунок кількості рядків та середньої кількості товару
SELECT cat.name AS category, COUNT(*) AS total_rows, AVG(od.quantity) AS average_order_quantity  
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
LEFT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id 
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
WHERE e.employee_id > 3 AND e.employee_id <= 10
GROUP BY cat.name;

4.5.,4.6. Фільтрація категорій, де середня кількість проданого товару > 21, та сортування за спаданням
SELECT cat.name AS category, COUNT(*) AS total_rows, AVG(od.quantity) AS average_order_quantity
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
LEFT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id 
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
WHERE e.employee_id > 3 AND e.employee_id <= 10
GROUP BY cat.name
HAVING AVG(od.quantity) > 21
ORDER BY total_rows DESC;  

4.7. Вибірка чотирьох рядків, пропускаючи перший запис
SELECT cat.name AS category, COUNT(*) AS total_rows, AVG(od.quantity) AS average_order_quantity
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
LEFT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id 
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
WHERE e.employee_id > 3 AND e.employee_id <= 10
GROUP BY cat.name
HAVING AVG(od.quantity) > 21
ORDER BY total_rows DESC
LIMIT 4 OFFSET 1;  
